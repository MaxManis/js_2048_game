{"version":3,"sources":["scripts/mobile.js","scripts/variables.js","scripts/utils.js","scripts/move.js","scripts/game.js","scripts/main.js"],"names":["mobileSwipes","field","touchstartX","touchendX","touchstartY","touchendY","addEventListener","e","changedTouches","screenX","screenY","checkDirection","startX","endX","startY","endY","Event","key","document","body","dispatchEvent","module","exports","totalCountOfCells","winCondition","values","moveCellColor","gameScore","querySelector","gameField","allCells","querySelectorAll","highestScore","startBtn","messageBeforeStart","messageDuringTheGame","messageAfterLose","messageAfterWin","require","getNotEmptyFields","cells","AllNotEmptyFields","cell","classList","length","push","getNotEmptyFieldsCoords","notEmptyFieldsCoorsds","id","split","slice","checkBetween","currPos","targetPos","allPos","dir","revert","pos","randomField","min","max","Math","floor","random","checkForMove","curr","target","currCoords","targetCoords","mainAxis","staticAxis","checkForMerge","innerText","setNewHighestScore","currentScore","currentHighestScore","Number","localStorage","getItem","setItem","mainListenerRemover","removeEventListener","arrowsPlayHandler","createItemInRandomEmptyField","emptyFields","randomIndex","randomValue","style","opacity","transition","add","setTimeout","removeAttribute","remove","mainMove","shouldReverse","isMoved","notEmptyFields","notEmptyFieldsPositions","allGameCells","reverse","fieldPos","cellPos","moveCell","mergeCells","axis","transformAxis","value","cssColor","getComputedStyle","backgroundColor","color","transform","gameInit","gameOnStart","gameOnRestart"],"mappings":"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","file":"main.b738954a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// - Module for mobile phones:\n// |-- To be able to play on mobile phones using swipes:\nfunction mobileSwipes(field) {\n  let touchstartX = 0;\n  let touchendX = 0;\n  let touchstartY = 0;\n  let touchendY = 0;\n\n  field.addEventListener('touchstart', e => {\n    touchstartX = e.changedTouches[0].screenX;\n    touchstartY = e.changedTouches[0].screenY;\n  });\n\n  field.addEventListener('touchend', e => {\n    touchendX = e.changedTouches[0].screenX;\n    touchendY = e.changedTouches[0].screenY;\n    checkDirection(touchstartX, touchendX, touchstartY, touchendY);\n  });\n}\n\nfunction checkDirection(startX, endX, startY, endY) {\n  const e = new Event('keyup');\n\n  if (endX < startX && startX - endX >= 100) {\n    e.key = 'ArrowLeft';\n  } else if (endX > startX && endX - startX >= 100) {\n    e.key = 'ArrowRight';\n  } else if (endY < startY && startY - endY >= 100) {\n    e.key = 'ArrowUp';\n  } else if (endY > startY && endY - startY >= 100) {\n    e.key = 'ArrowDown';\n  }\n\n  document.body.dispatchEvent(e);\n}\n\nmodule.exports = {\n  mobileSwipes,\n};\n","'use strict';\n\n// Base settings:\nconst totalCountOfCells = 16;\nconst winCondition = '2048';\nconst values = [2, 2, 2, 2, 2, 2, 2, 2, 2, 4];\nconst moveCellColor = '#ead6a6';\n\n// Fields and buttons:\nconst gameScore = document.querySelector('.game-score');\nconst gameField = document.querySelector('.game-field');\nconst allCells = gameField.querySelectorAll('.field-cell');\nconst highestScore = document.querySelector('.highest-score');\nconst startBtn = document.querySelector('.button');\n\n// Messages:\nconst messageBeforeStart = document.querySelector('.message-start');\nconst messageDuringTheGame = document.querySelector('.message-play');\nconst messageAfterLose = document.querySelector('.message-lose');\nconst messageAfterWin = document.querySelector('.message-win');\n\nmodule.exports = {\n  totalCountOfCells,\n  winCondition,\n  gameScore,\n  gameField,\n  allCells,\n  highestScore,\n  values,\n  startBtn,\n  messageBeforeStart,\n  messageDuringTheGame,\n  messageAfterLose,\n  messageAfterWin,\n  moveCellColor,\n};\n","'use strict';\n\nconst {\n  gameScore,\n} = require('./variables');\n\n// - utils module:\n// |-- with functions like get random field,\n// |-- get non empty fields, check if something between etc.\nfunction getNotEmptyFields(cells) {\n  const AllNotEmptyFields = [];\n\n  for (const cell of cells) {\n    if (cell.classList.length !== 1) {\n      AllNotEmptyFields.push(cell);\n    }\n  }\n\n  return AllNotEmptyFields;\n}\n\nfunction getNotEmptyFieldsCoords(cells) {\n  const notEmptyFieldsCoorsds = [];\n\n  for (const cell of cells) {\n    if (cell.classList.length !== 1) {\n      notEmptyFieldsCoorsds.push(cell.id.split('-').slice(1));\n    }\n  }\n\n  return notEmptyFieldsCoorsds;\n}\n\nfunction checkBetween(currPos, targetPos, allPos, dir, revert = false) {\n  if (revert) {\n    for (const pos of allPos) {\n      if (pos[dir] < currPos[dir] && pos[dir] > targetPos[dir]) {\n        return false;\n      }\n    }\n  } else {\n    for (const pos of allPos) {\n      if (pos[dir] > currPos[dir] && pos[dir] < targetPos[dir]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction randomField(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n// - function to check if its possible to move\n// |-- a cell into the free field:\nfunction checkForMove(\n  curr, target, currCoords, targetCoords,\n  mainAxis, staticAxis, revert = false\n) {\n  return (revert\n    ? currCoords[mainAxis] > targetCoords[mainAxis]\n    : currCoords[mainAxis] < targetCoords[mainAxis])\n    && currCoords[staticAxis] === targetCoords[staticAxis]\n    && target.classList.length === 1\n    && target.id !== curr.id;\n}\n\n// function to check if its possible to merge 2 cells in one:\nfunction checkForMerge(\n  curr, target, currCoords, targetCoords,\n  mainAxis, staticAxis, revert = false\n) {\n  return (revert\n    ? currCoords[mainAxis] > targetCoords[mainAxis]\n    : currCoords[mainAxis] < targetCoords[mainAxis])\n    && currCoords[staticAxis] === targetCoords[staticAxis]\n    && target.classList.length !== 1\n    && target.id !== curr.id\n    && target.innerText === curr.innerText;\n}\n\nfunction setNewHighestScore(currentScore, currentHighestScore) {\n  if (Number(localStorage.getItem('score')) < Number(currentScore.innerText)) {\n    localStorage.setItem('score', gameScore.innerText);\n\n    currentHighestScore.innerText = localStorage.getItem('score');\n  }\n}\n\nmodule.exports = {\n  getNotEmptyFields,\n  getNotEmptyFieldsCoords,\n  checkBetween,\n  randomField,\n  checkForMove,\n  checkForMerge,\n  setNewHighestScore,\n};\n","'use strict';\n\n// import\nconst {\n  getNotEmptyFields,\n  getNotEmptyFieldsCoords,\n  checkBetween,\n  randomField,\n  checkForMerge,\n  checkForMove,\n  setNewHighestScore,\n} = require('./utils');\n\nconst {\n  totalCountOfCells,\n  gameScore,\n  allCells,\n  highestScore,\n  values,\n  messageDuringTheGame,\n  messageAfterLose,\n  winCondition,\n} = require('./variables');\n\nfunction mainListenerRemover() {\n  document.body.removeEventListener('keyup', arrowsPlayHandler);\n}\n\nfunction createItemInRandomEmptyField() {\n  const emptyFields = [];\n\n  for (const cell of allCells) {\n    if (cell.classList.length === 1) {\n      emptyFields.push(cell);\n    }\n  }\n\n  // create new item:\n  if (emptyFields.length > 0) {\n    const randomIndex = randomField(0, emptyFields.length - 1);\n    const randomValue = randomField(0, values.length - 1);\n\n    emptyFields[randomIndex].style.opacity = '0';\n    emptyFields[randomIndex].style.transition = 'opacity 0.2s';\n\n    emptyFields[randomIndex]\n      .classList.add('field-cell--' + values[randomValue]);\n\n    emptyFields[randomIndex]\n      .innerText = values[randomValue];\n\n    setTimeout(() => {\n      emptyFields[randomIndex].style.opacity = '1';\n      emptyFields[randomIndex].removeAttribute('style');\n    }, 100);\n\n  // if its impossible to create a new item:\n  } else {\n    messageAfterLose.classList.remove('hidden');\n    messageDuringTheGame.classList.add('hidden');\n\n    setNewHighestScore(gameScore, highestScore);\n\n    // mainListenerRemover();\n    document.body.removeEventListener('keyup', arrowsPlayHandler);\n  }\n}\n\n// Main movement Handler:\nfunction arrowsPlayHandler(e) {\n  switch (e.key) {\n    case 'ArrowDown':\n      mainMove({\n        mainAxis: 0,\n        staticAxis: 1,\n        revert: false,\n        shouldReverse: true,\n      });\n      break;\n\n    case 'ArrowUp':\n      mainMove({\n        mainAxis: 0,\n        staticAxis: 1,\n        revert: true,\n        shouldReverse: false,\n      });\n      break;\n\n    case 'ArrowLeft':\n      mainMove({\n        mainAxis: 1,\n        staticAxis: 0,\n        revert: true,\n        shouldReverse: false,\n      });\n      break;\n\n    case 'ArrowRight':\n      mainMove({\n        mainAxis: 1,\n        staticAxis: 0,\n        revert: false,\n        shouldReverse: true,\n      });\n      break;\n  }\n}\n\n// Main movement algorithm\nfunction mainMove({\n  mainAxis,\n  staticAxis,\n  revert,\n  shouldReverse,\n}) {\n  let isMoved = false;\n  const notEmptyFields = getNotEmptyFields(allCells);\n  const notEmptyFieldsPositions = getNotEmptyFieldsCoords(allCells);\n  const allGameCells = [...allCells];\n\n  if (shouldReverse) {\n    notEmptyFields.reverse();\n    allGameCells.reverse();\n  }\n\n  for (const field of notEmptyFields) {\n    const fieldPos = field.id.split('-').slice(1);\n\n    for (const cell of allGameCells) {\n      const cellPos = cell.id.split('-').slice(1);\n\n      if (checkForMove(\n        field, cell, fieldPos, cellPos,\n        mainAxis, staticAxis, revert\n      )) {\n        moveCell(field, cell, fieldPos, cellPos, mainAxis);\n        isMoved = true;\n        break;\n      } else if (\n        checkForMerge(\n          field, cell, fieldPos, cellPos,\n          mainAxis, staticAxis, revert\n        )\n        && checkBetween(\n          fieldPos, cellPos, notEmptyFieldsPositions,\n          mainAxis, revert\n        )\n      ) {\n        mergeCells(field, cell, fieldPos, cellPos, mainAxis);\n        isMoved = true;\n        break;\n      }\n    }\n  }\n\n  if (isMoved || notEmptyFields.length === totalCountOfCells) {\n    setTimeout(() => {\n      createItemInRandomEmptyField();\n    }, 301);\n  }\n}\n\n// function to merge 2 cells in one:\nfunction mergeCells(curr, target, currCoords, targetCoords, axis) {\n  const transformAxis = axis ? 'X' : 'Y';\n  const value = curr.innerText;\n  const cssColor = getComputedStyle(target).backgroundColor;\n\n  curr.style.transition = 'all 0.3s';\n  curr.style.backgroundColor = cssColor;\n  curr.style.color = cssColor;\n\n  curr.style.transform = `\n    translate${transformAxis}(${(targetCoords[axis] - currCoords[axis]) * 85}px)\n  `;\n  curr.classList.remove(`field-cell--${value}`);\n  target.classList.remove(`field-cell--${value}`);\n  target.classList.add(`field-cell--${Number(value) * 2}`);\n  target.innerText = Number(value) * 2;\n\n  gameScore.innerText = Number(gameScore.innerText)\n    + Number(value) * 2;\n  curr.innerText = '';\n\n  setTimeout(() => {\n    curr.removeAttribute('style');\n  }, 300);\n\n  if (target.innerText === winCondition) {\n    // - Cant move it to ./utils.js 'cus of this line of code.\n    // |-- It doesnt work from another file.\n    document.body.removeEventListener('keyup', arrowsPlayHandler);\n\n    document.querySelector('.message-win').classList.remove('hidden');\n    document.querySelector('.message-play').classList.add('hidden');\n\n    setNewHighestScore(gameScore, highestScore);\n  }\n}\n\n// function to move a cell into the free field:\nfunction moveCell(curr, target, currCoords, targetCoords, axis) {\n  const transformAxis = axis === 0 ? 'Y' : 'X';\n  const value = curr.innerText;\n  const cssColor = getComputedStyle(curr).backgroundColor;\n\n  curr.style.transition = 'all 0.3s';\n  curr.style.backgroundColor = cssColor;\n  curr.style.color = cssColor;\n\n  curr.style.transform = `\n    translate${transformAxis}(${(targetCoords[axis] - currCoords[axis]) * 85}px)\n  `;\n\n  target.classList.add(`field-cell--${value}`);\n  target.innerText = value;\n  curr.classList.remove(`field-cell--${value}`);\n  curr.innerText = '';\n\n  setTimeout(() => {\n    curr.removeAttribute('style');\n  }, 300);\n}\n\nmodule.exports = {\n  arrowsPlayHandler,\n  createItemInRandomEmptyField,\n  mainListenerRemover,\n};\n","'use strict';\n\n// import:\nconst {\n  mobileSwipes,\n} = require('./mobile');\n\nconst {\n  gameScore,\n  gameField,\n  allCells,\n  highestScore,\n  startBtn,\n  messageBeforeStart,\n  messageDuringTheGame,\n  messageAfterLose,\n  messageAfterWin,\n} = require('./variables');\n\nconst {\n  arrowsPlayHandler,\n  createItemInRandomEmptyField,\n} = require('./move');\n\n// main function:\nfunction gameInit() {\n  highestScore.innerText = localStorage.getItem('score') || 0;\n\n  startBtn.addEventListener('click', (e) => {\n    if (startBtn.innerText === 'Start') {\n      gameOnStart();\n    } else if (startBtn.innerText === 'Restart') {\n      gameOnRestart();\n    }\n  });\n}\n\nfunction gameOnStart() {\n  startBtn.innerText = 'Restart';\n  startBtn.classList.remove(`start`);\n  startBtn.classList.add(`restart`);\n\n  messageDuringTheGame.classList.remove('hidden');\n  messageBeforeStart.classList.add('hidden');\n\n  createItemInRandomEmptyField();\n  createItemInRandomEmptyField();\n\n  mobileSwipes(gameField);\n  document.body.addEventListener('keyup', arrowsPlayHandler);\n}\n\nfunction gameOnRestart() {\n  for (const cell of allCells) {\n    if (cell.classList.length > 1) {\n      cell.classList.remove(`field-cell--${cell.innerText}`);\n      cell.innerText = '';\n    }\n  }\n\n  messageDuringTheGame.classList.remove('hidden');\n  messageAfterLose.classList.add('hidden');\n  messageAfterWin.classList.add('hidden');\n  gameScore.innerText = 0;\n\n  createItemInRandomEmptyField();\n  createItemInRandomEmptyField();\n\n  document.body.addEventListener('keyup', arrowsPlayHandler);\n}\n\nmodule.exports = { gameInit };\n","'use strict';\n\nconst { gameInit } = require('./game');\n\n// Game init:\ngameInit();\n"]}